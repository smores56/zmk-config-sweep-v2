/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define MAIN 0
#define SYM 1
#define NAV 2
#define FN 3

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <130>;
};

/ {
    behaviors {
        comma_pipe: comma_pipe {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_PIPE";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp PIPE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        colon_swap: colon_swap {
            compatible = "zmk,behavior-mod-morph";
            label = "COLON_SWAP";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_and: dot_and {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_AND";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp AMPS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        slash_star: slash_star {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_STAR";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp STAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dqt_question: dqt_question {
            compatible = "zmk,behavior-mod-morph";
            label = "DQT_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp DQT>, <&kp QMARK>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sqt_exclam: sqt_exclam {
            compatible = "zmk,behavior-mod-morph";
            label = "SQT_EXCLAM";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <100>;
            key-positions = <1 4>;
            bindings = <&kp ESC>;
        };

        combo_tab {
            timeout-ms = <100>;
            key-positions = <2 4>;
            bindings = <&kp TAB>;
        };

        combo_enter {
            timeout-ms = <100>;
            key-positions = <1 3>;
            bindings = <&kp ENTER>;
        };

        combo_q {
            timeout-ms = <100>;
            key-positions = <1 2>;
            bindings = <&kp Q>;
        };

        combo_z {
            timeout-ms = <100>;
            key-positions = <2 3>;
            bindings = <&kp Z>;
        };

        combo_quit {
            timeout-ms = <100>;
            key-positions = <5 7>;
            bindings = <&kp LG(Q)>;
        };

        combo_backslash {
            timeout-ms = <100>;
            key-positions = <7 8>;
            bindings = <&kp BSLH>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        MAIN_layer {
            bindings = <
                &kp J       &kp F      &kp M       &kp P      &kp V          &colon_swap &dot_and   &slash_star &dqt_question &sqt_exclam
                &kp R       &kp S      &kp N       &lt SYM D  &kp W          &comma_pipe &lt SYM A  &kp E       &kp I         &kp H
                &mt LSHFT X &mt LALT G &mt LCTRL L &mt LGUI C &kp B          &kp MINUS   &mt RGUI U &mt RCTRL O &mt RALT Y    &mt RSHFT K
                                                   &sk LSHFT  &lt NAV SPC    &kp T       &kp BKSP
            >;
        };

        SYM_layer {
            bindings = <
                &none     &kp N7 &kp N8 &kp N9 &kp CARET    &kp TILDE &kp LBRC &kp RBRC &kp HASH &none
                &kp PRCNT &kp N1 &kp N2 &kp N3 &kp EQUAL    &kp GRAVE &kp LPAR &kp RPAR &kp LT   &kp GT
                &none     &kp N4 &kp N5 &kp N6 &kp PLUS     &kp DLLR  &kp LBKT &kp RBKT &kp AT   &none
                                        &trans &kp N0       &trans    &trans 
            >;
        };

        NAV_layer {
            bindings = <
                &kp C_PREV &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT &kp C_PP           &none        &kp CAPS         &kp PRINTSCREEN  &none          &none
                &kp LEFT   &kp DOWN     &kp UP       &kp RIGHT  &kp LC(TAB)        &kp LG(O)    &kp LS(LG(DOWN)) &kp LC(LG(DOWN)) &kp LC(LG(UP)) &kp LS(LG(UP))
                &kp HOME   &kp PG_DN    &kp PG_UP    &kp END    &kp LS(LC(TAB))    &kp LG(FSLH) &kp LG(LEFT)     &kp LG(DOWN)     &kp LG(UP)     &kp LG(RIGHT)
                                                     &none      &none              &trans       &kp DEL
            >;
        };

        FN_layer {
            bindings = <
                &none &kp F7 &kp F8 &kp F9 &kp F10    &none &none        &none        &none        &none
                &none &kp F1 &kp F2 &kp F3 &kp F11    &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 
                &none &kp F4 &kp F5 &kp F6 &kp F12    &none &bt BT_CLR   &none        &none        &none   
                                    &none  &none      &none &none
            >;
        };	
    };
};
